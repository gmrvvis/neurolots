#version 400
layout(vertices=4) out;

in vec3 vPosition[];
in vec3 vCenter[];
in vec3 vTangent[];
in float vlot[];

out vec3 tcCenter[];
out float r[];
out vec3 tcNormal[];
out vec3 m[];

uniform float tng;

#define ID gl_InvocationID

void main( )
{
  tcCenter[ID] = vCenter[ID];
  tcNormal[ID] = vPosition[ID]-vCenter[ID];
  r[ID]=distance(vPosition[ID],vCenter[ID]);
  m[ID]=( tng + 1.0 )* normalize(vTangent[ID]) *
    distance(vCenter[0],vCenter[2]) / 8;
  float tcLod = (vlot[0]+vlot[1]+vlot[2]+vlot[3])/4;

  float lot01 = clamp( 64.0, 1.0, ( vlot[0] + vlot[1] ) * 0.5 *
    distance( vPosition[0], vPosition[1] ));
  float lot02 = clamp( 64.0, 1.0,( vlot[0] + vlot[2] ) * 0.5 *
    distance( vPosition[0], vPosition[2] ));
  float lot23 = clamp( 64.0, 1.0,( vlot[2] + vlot[3] ) * 0.5 *
    distance( vPosition[2], vPosition[3] ));
  float lot13 = clamp( 64.0, 1.0,( vlot[1] + vlot[3] ) * 0.5 *
    distance( vPosition[1], vPosition[3] ));

  gl_TessLevelInner[0] = ( lot01 + lot23 ) * 0.5;
  gl_TessLevelInner[1] = ( lot02 + lot13 ) * 0.5;
  gl_TessLevelOuter[0] = lot02;
  gl_TessLevelOuter[1] = lot01;
  gl_TessLevelOuter[2] = lot13;
  gl_TessLevelOuter[3] = lot23;
}
